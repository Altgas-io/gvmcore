#define MAIN_TYPE int64
#define MAIN_TYPE_SIZE 64
#define MAIN_TYPE_BLOCK_SIZE 4
#define EVM_ADDR_TYPE int64
#define EVM_BALANCE_TYPE int64

#define DATA_SIZE 1024
#define STORAGE_SIZE 256
#define LOG_AREA_SIZE 1024
#define INPUT_DATA_SIZE 1024
#define STACK_SIZE  2048

#include "gascost.h"

Device EVM
{
  //stack pointer
  Var int32 sp, "sp";
  // program couter
  Reg int32 pc,"pc";
  Var int1  is_pc_within_inst;
  Var int1  is_pc_const_changed;
  // account specific regs
  Reg EVM_ADDR_TYPE     cur_addr,"cur_addr";
  Reg EVM_ADDR_TYPE     caller_addr, "caller_addr";  
  Reg EVM_ADDR_TYPE     origin_addr, "origin_addr";
 
  Reg EVM_BALANCE_TYPE  gas_price, "gas_price";  
  Var EVM_BALANCE_TYPE  gas_available[MAIN_TYPE_BLOCK_SIZE], "gas_available$";
  
  // Reg MAIN_TYPE  code_size,"code_size"; // replaced by GetElfSize() call
  Reg MAIN_TYPE  ext_code_size,"ext_code_size";
  Reg MAIN_TYPE  inp_data_size,"inp_data_size"; 
  // size of active memory 
  Var int32 mem_size; // active RAM size
  // current block

  MemSpace prog_bus, 32, 32;
  // memory access  (256 size data bus)
  /*MemSpace data_bus, 32, MAIN_TYPE_SIZE;
  MemSpace storage_bus, 32, MAIN_TYPE_SIZE;
  MemSpace log_bus, 32, MAIN_TYPE_SIZE;
  MemSpace input_data, 32,MAIN_TYPE_SIZE;
  */
  Var int8 data_bus[DATA_SIZE],"data_bus$";
  // Reg MAIN_TYPE storage_bus[STORAGE_SIZE]; // replaced by mainStorage list
  Reg MAIN_TYPE input_data[INPUT_DATA_SIZE];
  Reg MAIN_TYPE log_bus[LOG_AREA_SIZE];
  Var MAIN_TYPE stack_arr[STACK_SIZE], "stack_arr$";
  
  // log pointer
  Reg int32 log_ptr, "log_ptr";
  
  PCOUNT pc;

  extern MAIN_TYPE KeccakAlg(int32 offs,int32 size);
  extern MAIN_TYPE GetElfSize();
  extern void      SaveToStorage(int32 offs, MAIN_TYPE value);
  extern MAIN_TYPE LoadFromStorage(int32 offs);
  extern void      UseGas(MAIN_TYPE value);

  extern void      DoArithm(int32 opcode);
  extern void      DoCompare(int32 opcode);

  // used to get stack value if it fits in single block (uint64)
  MAIN_TYPE GetSingleBlockFromStack()
  {
    int32 i;
    MAIN_TYPE data_val = 0;
    MAIN_TYPE data_tmp = stack_arr[sp-3];
    sp = sp - 4;
    for (i = 0; i < 8; i=i+1) {
      data_val = data_val | (((data_tmp >> 8*(7-i)) & 0xFF) << i);
    }
    return data_val;
  }

  // used to push value to stack if it fits in single block (uint64)
  Func PushSingleBlockToStack(MAIN_TYPE data_tmp)
  {
    int32 i;
    MAIN_TYPE data_val = 0;

    for (i = 0; i < 8; i=i+1) {
      data_val = data_val | (((data_tmp >> 8*i) & 0xFF) << 8*(7-i));
    }
    sp = sp + 1;
    stack_arr[sp]   = data_val;
    stack_arr[sp+1] = 0;
    stack_arr[sp+2] = 0;
    stack_arr[sp+3] = 0;
    sp = sp + 3;
  }

  MAIN_TYPE StopExec()
  {
    dbg_msg "@";
  }

  MAIN_TYPE GetExp()
  {
    USEGAS(STEPGAS5);
    MAIN_TYPE base = stack_arr[sp];
    MAIN_TYPE pow  = stack_arr[sp-1];
    MAIN_TYPE i;
    MAIN_TYPE res = 1;

    for(i = 0; i < pow; i = i+1)
    {
      res = res * base;
    }
    sp = sp - 1;
    stack_arr[sp] = res;
    return (MAIN_TYPE)0;
  }

  // pop result from stack
  MAIN_TYPE Pop()
  {
    MAIN_TYPE ret;
    ret = stack_arr[sp];
    sp = sp - 1;
    return ret;
  }
 // push result to stack
  void Push(MAIN_TYPE val)
  {
    sp = sp + 1;
    stack_arr[sp] = val;
  }

  // extend sign 
  MAIN_TYPE SignExtend()
  {
    int32 testBit;
    int32 end_bit;
    MAIN_TYPE number;
    MAIN_TYPE mask;
    USEGAS(STEPGAS3);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];

    sp = sp - 1;
    if(a < 31) {
      testBit = (int32)(a*8) + 7;
      end_bit = testBit + 1;
      mask = ((MAIN_TYPE)1 << testBit) - 1;
      if (b[end_bit:testBit] == 1) // check if a bit 'b[testBit]' is set
        number = b | ~mask;
      else
        number = b & mask;
      stack_arr[sp] = number;
      return (MAIN_TYPE)0;
    }
    stack_arr[sp] = (MAIN_TYPE)0;
    return (MAIN_TYPE)0;
  }

  // extract byte from word
  MAIN_TYPE ByteFromWord()
  {
     USEGAS(STEPGAS2);
     MAIN_TYPE a = stack_arr[sp];
     MAIN_TYPE b = stack_arr[sp-1];
     int32 start_bit = (int32)((31-a)*8);
     int32 end_bit = start_bit + 7;
     sp = sp - 1;
     stack_arr[sp] = b[end_bit:start_bit];
     return (MAIN_TYPE)0;
  }

  MAIN_TYPE GetModule()
  {
    USEGAS(STEPGAS3);
    MAIN_TYPE a   = stack_arr[sp];
    MAIN_TYPE mod = stack_arr[sp-1];
    MAIN_TYPE div;

    sp = sp - 1;
    if (mod == 0) {
      stack_arr[sp] = (MAIN_TYPE)0;
      return (MAIN_TYPE)0;
    }
    else
    {
      div = a / mod;
      stack_arr[sp] = a - (div * mod);
      return (MAIN_TYPE)0;
    }
  }

  MAIN_TYPE GetModuleAdd()
  {
    USEGAS(STEPGAS4);
    MAIN_TYPE a    = stack_arr[sp];
    MAIN_TYPE b    = stack_arr[sp-1];
    MAIN_TYPE base = a+b;
    MAIN_TYPE mod  = stack_arr[sp-2];
    MAIN_TYPE div;
    sp = sp - 2;
    if (mod == 0) {
      stack_arr[sp] = (MAIN_TYPE)0;
      return (MAIN_TYPE)0;
    }
    else
    {
      div = base / mod;
      stack_arr[sp] = base - (div * mod);
      return (MAIN_TYPE)0;
    }
  }

  MAIN_TYPE GetModuleMul()
  {
    USEGAS(STEPGAS4);
    MAIN_TYPE a    = stack_arr[sp];
    MAIN_TYPE b    = stack_arr[sp-1];
    MAIN_TYPE base = a*b;
    MAIN_TYPE mod  = stack_arr[sp-2];
    MAIN_TYPE div;
    sp = sp - 2;
    if (mod == 0) {
      stack_arr[sp] = (MAIN_TYPE)0;
      return (MAIN_TYPE)0;
    }
    else
    {
      div = base / mod;
      stack_arr[sp] = base - (div * mod);
      return (MAIN_TYPE)0;
    }
  }

  MAIN_TYPE GetModuleS()
  {
    USEGAS(STEPGAS3);
    MAIN_TYPE a   = stack_arr[sp];
    MAIN_TYPE mod = stack_arr[sp-1];
    MAIN_TYPE div;
    MAIN_TYPE sign; 
    int1 is_signed = (((signed)a) < 0); 
    sp = sp - 1;
    sign = (is_signed!=0) ? (MAIN_TYPE)(0-1) : (MAIN_TYPE)1;
    if (mod == 0)
    {
      stack_arr[sp] = (MAIN_TYPE)0;
      return (MAIN_TYPE)0;
    }
    else
    {
      div = a / mod;
      stack_arr[sp] = (sign * (a - (div * mod)));
      return (MAIN_TYPE)0;
    }// if(mod == 0) .. else
  }

  MAIN_TYPE StopOp()
  {
    USEGAS(STEPGAS0);
    dbg_msg "@";
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE AddOp()
  {
    USEGAS(STEPGAS2);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    sp = sp - 1;
    stack_arr[sp] = a + b;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE SubOp()
  {
    USEGAS(STEPGAS2);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    sp = sp - 1;
    stack_arr[sp] = a - b;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE MulOp()
  {
    USEGAS(STEPGAS3);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    sp = sp - 1;
    stack_arr[sp] = a * b;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE DivOp()
  {
    USEGAS(STEPGAS3);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    sp = sp - 1;
    if (b == 0) {
      stack_arr[sp] = (MAIN_TYPE)0;
    }
    else {
      stack_arr[sp] = a / b;
    }
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE DivOpS()
  {
    USEGAS(STEPGAS3);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    sp = sp - 1;
    if (b == 0) {
      stack_arr[sp] = (MAIN_TYPE)0;
    }
    else {
      stack_arr[sp] = (signed)a / (signed)b;
    }
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE LtOp()
  {
    USEGAS(STEPGAS2);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    sp = sp - 1;
    stack_arr[sp] = a < b;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE LtOpS()
  {
    USEGAS(STEPGAS2);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    sp = sp - 1;
    stack_arr[sp] = (signed)a < (signed)b;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE GtOp()
  {
    USEGAS(STEPGAS2);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    sp = sp - 1;
    stack_arr[sp] = a > b;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE GtOpS()
  {
    USEGAS(STEPGAS2);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    sp = sp - 1;
    stack_arr[sp] = (signed)a > (signed)b;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE EqOp()
  {
    USEGAS(STEPGAS2);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    sp = sp - 1;
    stack_arr[sp] = a == b;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE IsZeroOp()
  {
    USEGAS(STEPGAS2);
    MAIN_TYPE a = stack_arr[sp];
    stack_arr[sp] = a == 0;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE AndOp()
  {
    USEGAS(STEPGAS2);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    sp = sp - 1;
    stack_arr[sp] = a & b;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE OrOp()
  {
    USEGAS(STEPGAS2);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    sp = sp - 1;
    stack_arr[sp] = a | b;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE XorOp()
  {
    USEGAS(STEPGAS2);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    sp = sp - 1;
    stack_arr[sp] = a ^ b;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE NotOp()
  {
    USEGAS(STEPGAS2);
    MAIN_TYPE a = stack_arr[sp];
    stack_arr[sp] = ~a;
    return (MAIN_TYPE)0;
  }

  ArgList MAIN_TYPE ArithmOps(),
  { 
    // 0
    "STOP","ADD","MUL","SUB",
    // 4
    "DIV","SDIV","MOD","SMOD",
    // 8
    "ADDMOD","MULMOD","EXP","SIGNEXTEND"
  };

  ArgList MAIN_TYPE CompareLogOps(),
  {
    // 
    "LT","GT","SLT","SGT",
    "EQ","ISZERO","AND","OR",
    "XOR","NOT","BYTE"
  };

  ArgList MAIN_TYPE MemOps,
  {
    "POP", "MLOAD", "MSTORE", "MSTORE8",
    "SLOAD", "SSTORE", "JUMP", "JUMPI",
    "PC", "MSIZE", "GAS", "JUMPDEST"
  };
   
   
  MAIN_TYPE CallValue()
  {
    USEGAS(STEPGAS1);
    sp = sp + 1;
    stack_arr[sp] = (MAIN_TYPE)0;
    return (MAIN_TYPE)0;
  }
  
  MAIN_TYPE CallDataCopy()
  {
    USEGAS(STEPGAS2);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    MAIN_TYPE c = stack_arr[sp-2];
    sp = sp - 3;
    // stack_arr[sp] = (MAIN_TYPE)0;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE CallDataSize()
  {
    USEGAS(STEPGAS1);
    PushSingleBlockToStack(inp_data_size);
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE CodeCopy()
  {
    USEGAS(STEPGAS2);
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    MAIN_TYPE c = stack_arr[sp-2];
    sp = sp - 3;
    // stack_arr[sp] = (MAIN_TYPE)0;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE ExtCodeSize()
  {
    USEGAS(STEPGAS6);
    PushSingleBlockToStack(ext_code_size);
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE ExtCodeCopy()
  {
    USEGAS(STEPGAS6);
    // copy from prog bus to memory
    MAIN_TYPE a = stack_arr[sp];
    MAIN_TYPE b = stack_arr[sp-1];
    MAIN_TYPE c = stack_arr[sp-2];
    MAIN_TYPE d = stack_arr[sp-3];
    sp = sp - 4;
    // stack_arr[sp] = (MAIN_TYPE)0;
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE GetAddress()
  {
   USEGAS(STEPGAS1);
   EVM_ADDR_TYPE ca = cur_addr;
   PushSingleBlockToStack((MAIN_TYPE)ca);
   return (MAIN_TYPE)0;
  }

   // get balance of gived account
  MAIN_TYPE GetBalance()
  {
    USEGAS(STEPGAS6);
    MAIN_TYPE a = stack_arr[sp];
    stack_arr[sp] = (MAIN_TYPE)0;
    return (MAIN_TYPE)0;
  }  

  MAIN_TYPE GetOrigin()
  {
   USEGAS(STEPGAS1);
   EVM_ADDR_TYPE oa = origin_addr;
   PushSingleBlockToStack((MAIN_TYPE)oa);
   return (MAIN_TYPE)0;
  }

  MAIN_TYPE GetCaller()
  {
   EVM_ADDR_TYPE ca = caller_addr;
   USEGAS(STEPGAS1);
   PushSingleBlockToStack((MAIN_TYPE)ca);
   return (MAIN_TYPE)0;
  }

  MAIN_TYPE GetInputData()
  {
   USEGAS(STEPGAS2);
   int32 addr_val = (int32)(stack_arr[sp]);
   MAIN_TYPE inp_data = input_data[addr_val];
   stack_arr[sp] = inp_data;
   return (MAIN_TYPE)0;
  }

  MAIN_TYPE GetCodeSize()
  {
   USEGAS(STEPGAS1);
   MAIN_TYPE elf_size = GetElfSize();
   PushSingleBlockToStack(elf_size);
   return (MAIN_TYPE)0;
  }

   MAIN_TYPE GetGasPrice()
   {
     USEGAS(STEPGAS1);
     EVM_BALANCE_TYPE gp = gas_price;
     PushSingleBlockToStack((MAIN_TYPE)gp);
     return (MAIN_TYPE)0;
   }

   // accounts data
  ArgList MAIN_TYPE AccountsData(),
  {
    "ADDRESS", "BALANCE", "ORIGIN", "CALLER",
    "CALLVALUE", "CALLDATALOAD", "CALLDATASIZE", "CALLDATACOPY",
    "CODESIZE", "CODECOPY", "GASPRICE", "EXTCODESIZE",
    "EXTCODECOPY"
  },
  {
    GetAddress(), GetBalance(), GetOrigin(), GetCaller(),
    CallValue(), GetInputData(), CallDataSize(), CallDataCopy(),
    GetCodeSize(), CodeCopy(), GetGasPrice(), ExtCodeSize(),
    ExtCodeCopy()
  };
   
  // blockchain related data
  Var MAIN_TYPE CoinBase,"CoinBase";
  Var MAIN_TYPE TimeStamp, "TimeStamp";
  Var MAIN_TYPE Number, "Number";
  Var MAIN_TYPE Difficulty, "Difficulty";
  Var MAIN_TYPE GasLimit, "GasLimit";
  
  MAIN_TYPE BlockChainHash()
  {
    USEGAS(STEPGAS6);
    MAIN_TYPE a = stack_arr[sp];
    CoinBase = 0x10; // ot baldi
    TimeStamp = 0x1000;
    Number = 0x1234543234;
    Difficulty = 0x420323;
    GasLimit = 0x1000;
    // TODO
    PushSingleBlockToStack((MAIN_TYPE)0);
    return (MAIN_TYPE)0;
  }

  MAIN_TYPE GetCoinBase()
  {
    USEGAS(STEPGAS1);
    PushSingleBlockToStack(CoinBase);
  }

  MAIN_TYPE GetTimeStamp()
  {
    USEGAS(STEPGAS1);
    PushSingleBlockToStack(TimeStamp);
  }

  MAIN_TYPE GetNumber()
  {
    USEGAS(STEPGAS1);
    PushSingleBlockToStack(Number);
  }

  MAIN_TYPE GetDifficulty()
  {
    USEGAS(STEPGAS1);
    PushSingleBlockToStack(Difficulty);
  }

  MAIN_TYPE GetGasLimit()
  {
    USEGAS(STEPGAS1);
    PushSingleBlockToStack(GasLimit);
  }

  ArgList MAIN_TYPE BlockChain(),
  {
    "BLOCKHASH", "COINBASE", "TIMESTAMP", "NUMBER", "DIFFICULTY", "GASLIMIT"
  },
  {
    BlockChainHash(), GetCoinBase(), GetTimeStamp(), GetNumber(), GetDifficulty(), GetGasLimit()
  };


  // system operations
  MAIN_TYPE CreateAccount()
  {
    USEGAS(CREATEGAS);
    MAIN_TYPE endowment = stack_arr[sp];
    MAIN_TYPE initOff   = stack_arr[sp-1];
    MAIN_TYPE initSize  = stack_arr[sp-2];
    MAIN_TYPE account;
    account = 0x123456;
    // TODO
    sp = sp - 2;
    stack_arr[sp] = account;
    return (MAIN_TYPE)0;
  }
   
  MAIN_TYPE MakeCall()
  {
    USEGAS(CALLGAS);
    MAIN_TYPE callGas  = stack_arr[sp];
    MAIN_TYPE address  = stack_arr[sp-1];
    MAIN_TYPE value    = stack_arr[sp-2];
    MAIN_TYPE inOff    = stack_arr[sp-3];
    MAIN_TYPE inSize   = stack_arr[sp-4];
    MAIN_TYPE outOff   = stack_arr[sp-5];
    MAIN_TYPE outSize  = stack_arr[sp-6];
    MAIN_TYPE call_res = 0;
    // TODO
    sp = sp - 6;
    stack_arr[sp] = call_res;
    return (MAIN_TYPE)0;
  }
   
  MAIN_TYPE MakeCallCode()
  {
    USEGAS(CALLGAS);
    MAIN_TYPE callGas = stack_arr[sp];
    MAIN_TYPE address = stack_arr[sp-1];
    MAIN_TYPE value   = stack_arr[sp-2];
    MAIN_TYPE inOff   = stack_arr[sp-3];
    MAIN_TYPE inSize  = stack_arr[sp-4];
    MAIN_TYPE outOff  = stack_arr[sp-5];
    MAIN_TYPE outSize = stack_arr[sp-6];
    MAIN_TYPE call_res = 0;
    // TODO
    sp = sp - 6;
    stack_arr[sp] = call_res;
    return (MAIN_TYPE)0;
  }
   
  MAIN_TYPE Return()
  {
    USEGAS(STEPGAS0);
    StopExec();
    return (MAIN_TYPE)0;
  }
   
  MAIN_TYPE DelegateCall()
  {
    USEGAS(CALLGAS);
    MAIN_TYPE callGas = stack_arr[sp];
    MAIN_TYPE address = stack_arr[sp-1];
    MAIN_TYPE inOff   = stack_arr[sp-2];
    MAIN_TYPE inSize  = stack_arr[sp-3];
    MAIN_TYPE outOff  = stack_arr[sp-4];
    MAIN_TYPE outSize = stack_arr[sp-5];
    MAIN_TYPE call_res = 0;
    // TODO
    sp = sp - 5;
    stack_arr[sp] = call_res;
    return (MAIN_TYPE)0;
  }
 
  ArgList MAIN_TYPE SystemOps,
  {
    "CREATE","CALL","CALLCODE","RETURN","DELEGATECALL"
  },
  {
    CreateAccount(), MakeCall(), MakeCallCode(), Return(), DelegateCall()
  };

  Func ArithmStub(int32 opcode)
  {
    DoArithm(opcode);
  }

  Func CompareStub(int32 opcode)
  {
    DoCompare(opcode);
  }
   
  Func PushInst(int32 cnt)
  {
    int32 i;
    int32 j;
    MAIN_TYPE a = 0;
    MAIN_TYPE tmp;
    MAIN_TYPE block_cnt = 0;
    sp = sp + 1;
    for(j = 0; j < (cnt/8); j=j+1) {
      a = 0;
      for(i = 0; i < 8; i=i+1)
      {
        tmp = prog_bus[pc + (cnt-i-8*j)] & 0xFF;
        a = a | (tmp << (8*(7-i)));
      }
      stack_arr[sp+block_cnt] = a;
      block_cnt = block_cnt + 1;
    }
    if ((cnt&7) != 0) {
      a = 0;
      for(i = 0; i < (cnt&7); i=i+1)
      {
        tmp = prog_bus[pc + ((cnt&7)-i)] & 0xFF;
        tmp = tmp << 8*(7-i);
        a = a | tmp;
      }
      stack_arr[sp+block_cnt] = a;
      block_cnt = block_cnt + 1;
    }
    for(j=j+1; j < 4; j=j+1) {
      stack_arr[sp+j] = (MAIN_TYPE)0;
    }
    sp = sp + 3;
    return 0;
  }

  Func LogInst(int32 count,int32 log_ptr)
  {
    int32 i;
    // write log data
    for(i = 0; i < count; i = i + 1)
    {
      log_bus[log_ptr + 2 + count] = stack_arr[sp];
      sp = sp - 1;
    }
  }

  Func MloadInst(int32 addr_val)
  {
    int32 i;
    int32 j;
    MAIN_TYPE data_val[4];
    int32 init_shift;
    MAIN_TYPE data_tmp;
    for(j = 3; ((signed)j) >= 0; j=j-1) {
      data_val[j] = 0;
      for(i = 0; i < 8; i=i+1)
      {
        data_tmp = (MAIN_TYPE)data_bus[addr_val] << (8*i);
        data_val[j] = data_val[j] | data_tmp;
        addr_val = addr_val + 1;
      }
    }
    stack_arr[sp+1] = data_val[0];
    stack_arr[sp+2] = data_val[1];
    stack_arr[sp+3] = data_val[2];
    stack_arr[sp+4] = data_val[3];
    sp = sp + 4;
    return 0;
  }

  // write to memory 'as-readable' - straight big-endian (need in case of overlapping writes)
  Func MStoreInst(MAIN_TYPE addr_val)
  {
    int32 i;
    int32 j;
    MAIN_TYPE data_val[4];
    MAIN_TYPE data_tmp;
    data_val[3] = stack_arr[sp];
    data_val[2] = stack_arr[sp-1];
    data_val[1] = stack_arr[sp-2];
    data_val[0] = stack_arr[sp-3];
    sp = sp - 4;
    for(j = 3; ((signed)j) >= 0; j=j-1) {
      for(i = 0; i < 8; i=i+1)
      {
        data_tmp = (data_val[j] >> (8*i)) & 0xFF;
        data_bus[addr_val] = (int8)(data_tmp);
        addr_val = addr_val + 1;
      }
    }
    if (addr_val > mem_size)
      mem_size = addr_val;
  }

  Func MSizeOp()
  {
    int32 i;
    MAIN_TYPE data_tmp = (MAIN_TYPE)mem_size;
    MAIN_TYPE data_val = 0;
    for (i = 0; i < 8; i=i+1) {
      data_val = data_val | (((data_tmp >> 8*i) & 0xFF) << 8*(7-i));
    }
    sp = sp + 1;
    stack_arr[sp] = data_val; // mem_size cannot be greater than 0x400 (size of data_bus)
    stack_arr[sp+1] = 0;
    stack_arr[sp+2] = 0;
    stack_arr[sp+3] = 0;
    sp = sp + 3;
  }

  Func PcOp()
  {
    int32 i;
    MAIN_TYPE data_tmp  = (MAIN_TYPE)pc;
    MAIN_TYPE data_val = 0;
    for (i = 0; i < 8; i=i+1) {
      data_val = data_val | (((data_tmp >> 8*i) & 0xFF) << 8*(7-i));
    }
    sp = sp + 1;
    // TODO test if pc cannot fit in single 64bit block
    stack_arr[sp]   = data_val;
    stack_arr[sp+1] = 0;
    stack_arr[sp+2] = 0;
    stack_arr[sp+3] = 0;
    sp = sp + 3;
  }

  //  instruction set;
  ISET Main
  {
    INST "$syscall",(8,int4 syscall = SystemOps,int4 0xf)
    {
      syscall;
    }

    INST "STATICCALL",(8,int8 0xfa)
    {
      USEGAS(CALLGAS);
      MAIN_TYPE callGas = stack_arr[sp];
      MAIN_TYPE address = stack_arr[sp-1];
      MAIN_TYPE value   = 0;
      MAIN_TYPE inOff   = stack_arr[sp-2];
      MAIN_TYPE inSize  = stack_arr[sp-3];
      MAIN_TYPE outOff  = stack_arr[sp-4];
      MAIN_TYPE outSize = stack_arr[sp-5];
      MAIN_TYPE call_res = 0;
      // TODO
      sp = sp - 5;
      stack_arr[sp] = call_res;
    }

    INST "REVERT", (8,int8 0xfd)
    {
       USEGAS(STEPGAS0);
       MAIN_TYPE a = stack_arr[sp];
       MAIN_TYPE b = stack_arr[sp-1];
       sp = sp - 2;
       StopExec();
    }

    INST "SUICIDE",(8,int8 0xff)
    {
      USEGAS(STEPGAS0);
      MAIN_TYPE a = stack_arr[sp];
      sp = sp - 1;
      StopExec();      
    }

    INST "$gas_opcode",(8,int4 gas_opcode = BlockChain,int4 0x4)
    {
      gas_opcode;
    }

    INST "$opcode",(8,int4 opcode = AccountsData,int4 0x3)
    {
      opcode;
    }

    INST "PUSH$count", (8,int5 count,int3 0b011)
    {
      USEGAS(STEPGAS2);
      PushInst(count + 1);
      is_pc_const_changed = 1;
      pc = pc + count + 2;
    }

    INST "DUP$count", (8,int4 count,int4 0x8)
    {
      USEGAS(STEPGAS2);
      MAIN_TYPE a;
      a = stack_arr[sp - (count + 1)];
      sp = sp + 1;
      stack_arr[sp] = a;
    }

    INST "SWAP$count", (8,int4 count,int4 0x9)
    {
      int32 i;
      int32 offs;
      MAIN_TYPE first_el[4];

      USEGAS(STEPGAS2);
      first_el[3] = stack_arr[sp-3];
      first_el[2] = stack_arr[sp-3];
      first_el[1] = stack_arr[sp-1];
      first_el[0] = stack_arr[sp];
      for (i=0; i<4; i=i+1) {
        offs = sp - ((4*(count + 1)) + i);
        stack_arr[sp-i] = stack_arr[offs];
        stack_arr[offs] = first_el[i];
      }
    }

    INST "LOG$count", (8, int3 count,int1 0,int4 0xa)
    {
      USEGAS(LOGGAS + count * LOGTOPICGAS);
      int32 i;
      MAIN_TYPE l1_data = stack_arr[sp];
      MAIN_TYPE l2_data = stack_arr[sp-1];
      int32 m_ptr = (int32)l1_data;
      int32 m_size = (int32)l2_data;
      // write log data
      LogInst(count,m_ptr);       
      log_ptr = count + 2;
      sp = sp - 2;
    } 

    INST "$opcode", (8,int4 opcode = MemOps,int4 0x5)
    {
      int32 i;
      int32 dec_cnt;
      MAIN_TYPE addr_val = 0;
      int32 init_shift;
      MAIN_TYPE data_val;
      MAIN_TYPE pc_val;
      MAIN_TYPE data_tmp;

      if((opcode < 8) & (opcode != 0)) {
        addr_val = GetSingleBlockFromStack();
      }
      switch((int32)opcode)
      {
        case 0: // POP
          USEGAS(STEPGAS1);
          sp = sp - 4;
          break;

        case 1: // MLOAD
          USEGAS(STEPGAS2);
          MloadInst(addr_val);
          break;

        case 2: // MSTORE
          USEGAS(STEPGAS2);
          MStoreInst(addr_val);
          break;

        case 3: // MSTORE8
          USEGAS(STEPGAS2);
          data_val = stack_arr[sp-3];
          sp = sp - 4;
          data_bus[addr_val] = (int8)((data_val >> 7*8) & 0xFF);
          if (addr_val > mem_size)
            mem_size = addr_val;
          break;

        case 4: // SLOAD
          USEGAS(SLOADGAS);
          data_val = LoadFromStorage(addr_val);
          sp = sp + 1;
          stack_arr[sp] = data_val;
          break;

        case 5: // SSTORE
          USEGAS(STEPGAS0);
          data_val = stack_arr[sp];
          sp = sp - 1;
          SaveToStorage(addr_val, data_val);
          break;

        case 6: // JUMP 
          USEGAS(STEPGAS4);
          pc = addr_val;
          is_pc_within_inst = 1;
          break;

        case 7: // JUMPI
          USEGAS(STEPGAS5);
          if(stack_arr[sp]!=0) // get condition
          {
            pc = (int32)addr_val; // set new pc
            is_pc_within_inst = 1;
          }
          sp = sp - 1;
          break;

        case 8: // PC
          USEGAS(STEPGAS1);
          PcOp();
          break;

        case 9: // MSIZE
          USEGAS(STEPGAS1);
          MSizeOp();
          break;

        case 10: // GAS
          USEGAS(STEPGAS1);
          sp = sp + 1;
          stack_arr[sp]   = gas_available[0];
          stack_arr[sp+1] = gas_available[1];
          stack_arr[sp+2] = gas_available[2];
          stack_arr[sp+3] = gas_available[3];
          sp = sp + 3;
          break;

        case 11: // JUMPDEST
         USEGAS(JUMPDESTGAS);
         break; // do nothing
      }// end of switch
    } // end of instruction

    INST "$opcode",(8,int4 opcode = ArithmOps,int4 0x0)
    {
      ArithmStub((int32)opcode);
    }

    INST "$opcode", (8,int4 opcode = CompareLogOps, int4 0x1)
    {
      CompareStub((int32)opcode);
    }

    INST "SHA3", (8,int8 0x20)
    {
      USEGAS(SHA3GAS);
      // compute Keccak-256 hash
      MAIN_TYPE res = 0xdeadbeef;
      // TODO Keccak does not support 64-bit hash. Add 256-bit support, delete argument passing and uncomment
      // KeccakAlg((int32)a,(int32)b);
      // sp = sp - 1;
      stack_arr[sp] = res;
    }

  }// end of ISET

   Var int32 counter;
   RESET
   {
     pc = 0;
     sp = 0-1;
     log_ptr = 0;
     for(counter = 0 ; counter< DATA_SIZE;counter = counter + 1)
     {
       data_bus[counter] = 0;
     }
   }

  Operate
  {
    int8 code = prog_bus[pc];
    // reset flags
    is_pc_within_inst = 0;
    is_pc_const_changed = 0;
    // decode and execute
    Main.decode(code);
    // increment pc flag if need
    if((is_pc_within_inst == 0) && (is_pc_const_changed == 0))
      pc = pc + 1;
  }
